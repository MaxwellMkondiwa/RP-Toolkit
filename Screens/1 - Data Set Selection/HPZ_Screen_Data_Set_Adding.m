function [data_name, locations, pref_class, ok] = HPZ_Screen_Data_Set_Adding(data_name)

% this function is called from HPZ_Data_Set_Selection only. when the user
% browses for a new data file and chooses her desired file, this screen
% pops up and ask the user to define the name of the dataset (how it will
% appear on the HPZ_Data_Set_Selection screen), the column number that
% represent the required fields for the program, and the preferences class.

% for detailed explanations about input/output variables that possess
% the same name and meaning in multiple functions (e.g. data, action_flag, 
% pref_class, etc.) see: HPZ_Variables_Documentation in the "Others" sub-folder 

% it is recommended to use the numeric variables in the beginning of the 
% function when making changes to the screen.
% it is also recommended to use numeric variables in the same manner when
% adding new elements to the screen.



% the following initializations are only to prevent an error when the user
% presses "cancel":
pref_class = 0;
locations = 0;



% screen size
figure_width = 510;
figure_height = 510;
% limit of height as percentage of computer screen height
max_height_percent = HPZ_Constants.max_height_percent;

% height of bottom space designated for OK and Cancel buttons
buttons_space_height = 50;
% buttons height as percentage of the space they are in
buttons_height = 0.6;
% the distant between a button to the edge of the screen,
% and is also half the distance between buttons.
% the size of the buttons is designed to fit this and the buttons_height 
% and the width of the screen
buttons_dists = 10;
% number of buttons
buttons_num = 2;

% distance of highest element from top
top_dist = 10;
% distance of most left element from the left edge
left_dist = 20;

% how much distance between parts that are one next to each other (horizontally)  
move_right = 10;
% how much distance between parts that are one below each other 
move_down = 30;

% width of each element
element_width = 70;
label_height = 30;
text_height = 25;
radio_button_height = 28;

% font size of label
label_font_size = 12; %#ok<NASGU>
% general font size
font_size = 8;
% general but bigger font size
big_font_size = 10;



%% create the figure, with a slider if needed
% scroll bar width (if scroll is needed)
scroll_width = 20;
bottom_space_height = buttons_space_height;
top_space_height = 0;
panel_height = figure_height - bottom_space_height - top_space_height;
figure_title = 'File Format Window';
[fh , panel] = ui_scroll_screen(figure_width, figure_height, scroll_width, max_height_percent, top_space_height, bottom_space_height, figure_title);

% width including scroll bar if there is one
pos = get(fh,'position');
full_width = pos(3);





% list of text input strings (initialized to empty strings)
input_strings_list = {'', '', '', '', '', ''};
% initialization
data_name_text_copy = data_name;





%% Main Header
% current height of element
current_height = 20;
% current bottom coordinate
current_bottom = panel_height-top_dist - current_height;
main_label = uicontrol('Parent',panel, ...
    'style','text', ...
    'units','pix', ...
    'position',[0 , current_bottom , figure_width , current_height], ...
    'backgroundc',get(fh,'color'), ...
    'fontsize',12,'fontweight','bold', ...
    'HorizontalAlignment','center', ...
    'string','File Format Window'); %#ok<NASGU>



%% Name of File Data
% (must not contain ",")

% current bottom coordinate
current_bottom = current_bottom - move_down;

% current height of element
current_height = 20;
% current bottom coordinate
current_bottom = current_bottom - current_height;
data_file_label = uicontrol('Parent',panel, ...
    'style','text', ...
    'units','pix', ...
    'position',[figure_width/8 , current_bottom , figure_width*3/4 , current_height], ...
    'backgroundc',get(fh,'color'), ...
    'fontsize',10, ...
    'HorizontalAlignment','center', ...
    'string','Name of Data File'); %#ok<NASGU>

% current height of element
current_height = 30;
% current bottom coordinate
current_bottom = current_bottom - current_height;
data_file_text = uicontrol('Parent',panel, ...
    'style','edit', ...
    'enable','off', ...
    'string',data_name, ...
    'units','pix', ...
    'position',[figure_width/8 , current_bottom , figure_width*3/4 , current_height], ...
    'backgroundc',get(fh,'color'), ...
    'fontsize',10, ...
    'callback',{@check_button_call}); %#ok<NASGU>



%% Name of Data

% current bottom coordinate
current_bottom = current_bottom - move_down/2;

% current height of element
current_height = 20;
% current bottom coordinate
current_bottom = current_bottom - current_height;
data_name_label = uicontrol('Parent',panel, ...
    'style','text', ...
    'units','pix', ...
    'position',[figure_width/8 , current_bottom , figure_width*3/4 , current_height], ...
    'backgroundc',get(fh,'color'), ...
    'fontsize',10, ...
    'HorizontalAlignment','center', ...
    'string','Name of Data'); %#ok<NASGU>

% current height of element
current_height = 30;
% current bottom coordinate
current_bottom = current_bottom - current_height;
data_name_text = uicontrol('Parent',panel, ...
    'style','edit', ...
    'string',data_name, ...
    'enable', 'on', ...
    'units','pix', ...
    'position',[figure_width/8 , current_bottom , figure_width*3/4 , current_height], ...
    'backgroundc','white', ...
    'fontsize',10);



%% Data Formatting Information

% current bottom coordinate (HOUTMAN-MAX is just below VARIAN)
current_bottom = current_bottom - move_down;

%% Labels
% current bottom and left coordinate
current_bottom = current_bottom - label_height;
current_left = left_dist;
subject_label = uicontrol('Parent',panel, ...
    'style','text', ...
    'units','pix', ...
    'position',[current_left , current_bottom , element_width , label_height], ...
    'backgroundc',get(fh,'color'), ...
    'fontsize',font_size, ...
    'HorizontalAlignment','center', ...
    'string','Subject Column No.'); %#ok<NASGU>

% current left coordinate
current_left = current_left + element_width + move_right;
observation_label = uicontrol('Parent',panel, ...
    'style','text', ...
    'units','pix', ...
    'position',[current_left , current_bottom , element_width , label_height], ...
    'backgroundc',get(fh,'color'), ...
    'fontsize',font_size, ...
    'HorizontalAlignment','center', ...
    'string','Observation Column No.'); %#ok<NASGU>

% current left coordinate
current_left = current_left + element_width + move_right;
quantity_label = uicontrol('Parent',panel, ...
    'style','text', ...
    'units','pix', ...
    'position',[current_left , current_bottom , 2*element_width + move_right , label_height], ...
    'backgroundc',get(fh,'color'), ...
    'fontsize',font_size, ...
    'HorizontalAlignment','center', ...
    'string','Quantity Column No. Range'); %#ok<NASGU>

% current left coordinate
current_left = current_left + 2*element_width + 2*move_right;
maxquantity_label = uicontrol('Parent',panel, ...
    'style','text', ...
    'units','pix', ...
    'position',[current_left , current_bottom , 2*element_width + move_right , label_height], ...
    'backgroundc',get(fh,'color'), ...
    'fontsize',font_size, ...
    'HorizontalAlignment','center', ...
    'string','MaxQuantity Column No. Range'); %#ok<NASGU>

%% Texts to be editted by the user
% current bottom coordinate
current_bottom = current_bottom - text_height;
% current left coordinate
current_left = left_dist;
subject_text = uicontrol('Parent',panel, ...
    'style','edit', ...
    'string','', ...
    'enable', 'on', ...
    'units','pix', ...
    'position',[current_left , current_bottom , element_width , text_height], ...
    'backgroundc','white', ...
    'fontsize',big_font_size, ...
    'callback',{@check_button_call});

% current left coordinate
current_left = current_left + element_width + move_right;
observation_text = uicontrol('Parent',panel, ...
    'style','edit', ...
    'string','', ...
    'enable', 'on', ...
    'units','pix', ...
    'position',[current_left , current_bottom , element_width , text_height], ...
    'backgroundc','white', ...
    'fontsize',big_font_size, ...
    'callback',{@check_button_call});

% current left coordinate
current_left = current_left + element_width + move_right;
quantity1_text = uicontrol('Parent',panel, ...
    'style','edit', ...
    'string','', ...
    'enable', 'on', ...
    'units','pix', ...
    'position',[current_left , current_bottom , element_width , text_height], ...
    'backgroundc','white', ...
    'fontsize',big_font_size, ...
    'callback',{@check_button_call});

% "-" between the quantities
% current left coordinate
current_left = current_left + element_width;
quantity_line_label = uicontrol('Parent',panel, ...
    'style','text', ...
    'units','pix', ...
    'position',[current_left , current_bottom-8 , move_right , label_height], ...
    'backgroundc',get(fh,'color'), ...
    'fontsize',big_font_size, ...
    'HorizontalAlignment','center', ...
    'string','–'); %#ok<NASGU>

% current left coordinate
current_left = current_left + move_right;
quantity2_text = uicontrol('Parent',panel, ...
    'style','edit', ...
    'string','', ...
    'enable', 'on', ...
    'units','pix', ...
    'position',[current_left , current_bottom , element_width , text_height], ...
    'backgroundc','white', ...
    'fontsize',big_font_size, ...
    'callback',{@check_button_call});

% current left coordinate
current_left = current_left + element_width + move_right;
maxquantity1_text = uicontrol('Parent',panel, ...
    'style','edit', ...
    'string','', ...
    'enable', 'on', ...
    'units','pix', ...
    'position',[current_left , current_bottom , element_width , text_height], ...
    'backgroundc','white', ...
    'fontsize',big_font_size, ...
    'callback',{@check_button_call});

% "-" between the quantities
% current left coordinate
current_left = current_left + element_width;
maxquantity_line_label = uicontrol('Parent',panel, ...
    'style','text', ...
    'units','pix', ...
    'position',[current_left , current_bottom-8 , move_right , label_height], ...
    'backgroundc',get(fh,'color'), ...
    'fontsize',big_font_size, ...
    'HorizontalAlignment','center', ...
    'string','–'); %#ok<NASGU>

% current left coordinate
current_left = current_left + move_right;
maxquantity2_text = uicontrol('Parent',panel, ...
    'style','edit', ...
    'string','', ...
    'enable', 'on', ...
    'units','pix', ...
    'position',[current_left , current_bottom , element_width , text_height], ...
    'backgroundc','white', ...
    'fontsize',big_font_size, ...
    'callback',{@check_button_call});



%% Preferences Class (None or Risk or OR)

% current bottom coordinate (HOUTMAN-MAX is just below VARIAN)
current_bottom = current_bottom - move_down;

% current height of element
current_height = radio_button_height*5;
% current bottom coordinate
current_bottom = current_bottom - current_height;
pref_class = uibuttongroup('Parent',panel, ...
    'units','pix', ...
    'title', 'Preferences Class', ...
    'pos',[figure_width/4 , current_bottom , figure_width*2/4 , current_height]);

% this one is just so initially there will be no option that is marked
pref_class_rd(1) = uicontrol(pref_class, ...
    'value', 1, ...
    'enable','on', ...
    'style','rad', ...
    'unit','pix', ...
    'position',[15 , radio_button_height*3.2 , figure_width*3/8 , radio_button_height], ...
    'string','No Specific Preferences Class', ...
    'callback',{@check_button_call});

pref_class_rd(2) = uicontrol(pref_class, ...
    'value', 0, ...
    'enable','on', ...
    'style','rad', ...
    'unit','pix', ...
    'position',[15 , radio_button_height*3.2 , figure_width*3/8 , radio_button_height], ...
    'string','No Specific Preferences Class', ...
    'callback',{@check_button_call});

pref_class_rd(3) = uicontrol(pref_class, ...
    'value', 0, ...
    'enable','on', ...
    'style','rad', ...
    'unit','pix', ...
    'position',[15 , radio_button_height*2.2 , figure_width*3/8 , radio_button_height], ...
    'string','Risk  (Disappointment Aversion)', ...
    'callback',{@check_button_call});

pref_class_rd(4) = uicontrol(pref_class, ...
    'value', 0, ...
    'enable','on', ...
    'style','rad', ...
    'unit','pix', ...
    'position',[15 , radio_button_height*1.2 , figure_width*3/8 , radio_button_height], ...
    'string','OR  (Other Regarding)', ...
    'callback',{@check_button_call});

pref_class_rd_OR_label = uicontrol(pref_class, ...
    'style','text', ...
    'unit','pix', ...
    'position',[15 , radio_button_height*0.2 , figure_width*3/8 , radio_button_height], ...
    'fontsize',6, ...
    'ForegroundColor', [0.8,0.1,0.1], ...
    'HorizontalAlignment','left', ...
    'string','In OR the order of goods is important; first good is Money to Self and second good is Money to Other.'); %#ok<NASGU>);




%% OK Button
ok_button = uicontrol('Parent',fh, 'style','push', ...
    'unit','pix', ...
    'enable','off', ...
    'position',[buttons_dists , (1-buttons_height)/2*buttons_space_height , (full_width-(buttons_num+1)*buttons_dists)/buttons_num , buttons_height*buttons_space_height], ...
    'string','OK', ...
    'callback',{@ok_button_call});

%% Cancel Button
cancel_button = uicontrol('Parent',fh, 'style','push', ...
    'unit','pix', ...
    'enable','on', ...
    'position',[(full_width/2)+buttons_dists , (1-buttons_height)/2*buttons_space_height , (full_width-(buttons_num+1)*buttons_dists)/buttons_num , buttons_height*buttons_space_height], ...
    'string','Cancel', ...
    'callback',{@cancel_button_call}); %#ok<NASGU>





uiwait(fh)  % Prevent all other processes from starting until closed.





%% Check if user chose everything needed
function [] = check_button_call(varargin)
    
    input_elements_list = {subject_text, observation_text, quantity1_text, quantity2_text, maxquantity1_text, maxquantity2_text};
    
    for element_number = 1:length(input_elements_list) 
        
        element = input_elements_list{element_number};

        string_data = get(element, 'string');

        if ~all(ismember(string_data, '1234567890')) || isempty(str2num(string_data)) || str2num(string_data) == 0 || str2num(string_data) > 1000 %#ok<*ST2NM>
            % the user entered something that is not a proper number
            set(element,'string',input_strings_list{element_number});
        else
            % update the list of strings
            input_strings_list{element_number} = string_data;
        end
        
    end
    
    
    % check that file name doesn't contain ","
    string_data = get(data_name_text, 'string');
    if any(ismember(string_data, ','))
        % the user entered something that contains ","
        set(data_name_text,'string',data_name_text_copy);
    else
        % update the data name string
        data_name_text_copy = string_data;
    end
    
    
    locations = [str2num(get(subject_text, 'string')), ...
                str2num(get(observation_text, 'string')), ...
                str2num(get(quantity1_text, 'string')), ...
                str2num(get(quantity2_text, 'string')), ...
                str2num(get(maxquantity1_text, 'string')), ...
                str2num(get(maxquantity2_text, 'string'))];
    if length(locations) == 6
        locations_full = [locations(1:2), locations(3):locations(4), locations(5):locations(6)];
    end
    data_name = get(data_name_text, 'string');
    % preferences class
    if get(pref_class_rd(1), 'value') == 1.0
        % the user didn't choose anything
        pref_class = inf;
    elseif get(pref_class_rd(2), 'value') == 1.0
        pref_class = HPZ_Constants.no_pref;
    elseif get(pref_class_rd(3), 'value') == 1.0
        pref_class = HPZ_Constants.risk_pref;
    elseif get(pref_class_rd(4), 'value') == 1.0
        pref_class = HPZ_Constants.OR_pref;
    end
    
    % if any of these condition is satisfied, then the input is not valid,
    % we keep the OK button disabled, otherwise, we enable it.
    if isempty(data_name) || isinf(pref_class) || length(locations) < 6 || length(unique(locations_full)) < length(locations_full) || ...
            ( pref_class == HPZ_Constants.no_pref && (locations(4) <= locations(3) || locations(6) <= locations(5)) || locations(6)-locations(5) ~= locations(4)-locations(3) ) || ...
            ( pref_class ~= HPZ_Constants.no_pref && (locations(4) ~= locations(3)+1 || locations(6) ~= locations(5)+1) )
        set(ok_button, 'enable', 'off');
    else
        set(ok_button, 'enable', 'on');
    end
    
    
end



%% OK button
function [] = ok_button_call(varargin)
    
    ok = 1;
    locations = [str2num(get(subject_text, 'string')), ...
                str2num(get(observation_text, 'string')), ...
                str2num(get(quantity1_text, 'string')), ...
                str2num(get(quantity2_text, 'string')), ...
                str2num(get(maxquantity1_text, 'string')), ...
                str2num(get(maxquantity2_text, 'string'))];
    data_name = get(data_name_text, 'string');
    
    % preferences class
    if get(pref_class_rd(1), 'value') == 1.0
        % the user didn't choose anything
        return
    elseif get(pref_class_rd(2), 'value') == 1.0
        pref_class = HPZ_Constants.no_pref;
    elseif get(pref_class_rd(3), 'value') == 1.0
        pref_class = HPZ_Constants.risk_pref;
    elseif get(pref_class_rd(4), 'value') == 1.0
        pref_class = HPZ_Constants.OR_pref;
    end

    % close the window
    close(fh);

end % end of call back function



%% Cancel button
function [] = cancel_button_call(varargin)
    % Callback for Cancel button.

    ok = 0;
    locations = 0;

    % close the window
    close(fh);

end

end